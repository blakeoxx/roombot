<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_robot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>startingDirection = "up";
targetDirection = 0;
moveSpeed = 5;
turnSpeed = 10;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!obj_controller_room.moveStarted)
{
    if (startingDirection == "right") direction = 0;
    else if (startingDirection == "up") direction = 90;
    else if (startingDirection == "left") direction = 180;
    else direction = 270;
    targetDirection = direction;
    speed = 0;
}
else if (direction != targetDirection)
{
    speed = 0;
    if (abs(direction - targetDirection) &lt;= turnSpeed)
    {
        // Normalize the target direction
        targetDirection = targetDirection % 360;
        if (targetDirection &lt; 0) targetDirection += 360;
        
        direction = targetDirection;
    }
    else if (targetDirection &gt; direction) direction += turnSpeed;
    else if (targetDirection &lt; direction) direction -= turnSpeed;
}
else
{
    speed = moveSpeed;
    nextx = x;
    nexty = y;
    if (direction == 0) nextx += speed;
    else if (direction == 90) nexty -= speed;
    else if (direction == 180) nextx -= speed;
    else nexty += speed;
    
    collidingWallColor = undefined;
    if (place_meeting(nextx, nexty, obj_wall_default))
    {
        collidingWall = instance_place(nextx, nexty, obj_wall_default);
        if (collidingWall.corner != "default")
        {
            if (direction == 0 || direction == 180) collidingWallColor = collidingWall.vertSideColor;
            else if (direction == 90 || direction == 270) collidingWallColor = collidingWall.horizSideColor;
        }
        else
        {
            speed = 0;
            if (obj_event_wallhit_default.associatedAction == "turnleft") targetDirection = direction + 90;
            else if (obj_event_wallhit_default.associatedAction == "turnright") targetDirection = direction - 90;
            else if (obj_event_wallhit_default.associatedAction == "turnaround") targetDirection = direction + 180;
        }
    }
    
    if (place_meeting(nextx, nexty, obj_wall_red) || collidingWallColor == c_red)
    {
        speed = 0;
        if (obj_event_wallhit_red.associatedAction == "turnleft") targetDirection = direction + 90;
        else if (obj_event_wallhit_red.associatedAction == "turnright") targetDirection = direction - 90;
        else if (obj_event_wallhit_red.associatedAction == "turnaround") targetDirection = direction + 180;
    }
    else if (place_meeting(nextx, nexty, obj_couch))
    {
        speed = 0;
        if (obj_event_obshit_couch.associatedAction == "turnleft") targetDirection = direction + 90;
        else if (obj_event_obshit_couch.associatedAction == "turnright") targetDirection = direction - 90;
        else if (obj_event_obshit_couch.associatedAction == "turnaround") targetDirection = direction + 180;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="72">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle = direction-90;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
